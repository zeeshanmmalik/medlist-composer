- content_for :page_js do
  = javascript_include_tag 'jquery.dynotable.js'
  = javascript_include_tag 'prescription_template.js'
  = javascript_include_tag 'drugs_mapping_data.js'
  
  :javascript
    function resetEditableValues( $tr_children, $tr ){
      var item = {};
      item.pfn = $tr_children.find('[data-name="generic_name"]:first').attr('data-initval');
      item.strength = $tr_children.find('[data-name="strength"]:first').attr('data-initval');
      item.brand = $tr_children.find('[data-name="brand_name"]:first').attr('data-initval');
      item.purpose = $tr_children.find('[data-name="purpose"]:first').attr('data-initval');
      item.instruction = $tr_children.find('[data-nested-2="instructions"]:first').attr('data-initval');
      item.am_check = $tr_children.find('[data-name="am_check"]:first').attr('data-initval');
      item.am_time = $tr_children.find('[data-name="am_time"]:first').attr('data-initval');
      item.noon_check = $tr_children.find('[data-name="noon_check"]:first').attr('data-initval');
      item.noon_time = $tr_children.find('[data-name="noon_time"]:first').attr('data-initval');
      item.supper_check = $tr_children.find('[data-name="supper_check"]:first').attr('data-initval');
      item.supper_time = $tr_children.find('[data-name="supper_time"]:first').attr('data-initval');
      item.bedtime_check = $tr_children.find('[data-name="bedtime_check"]:first').attr('data-initval');
      item.bedtime_time = $tr_children.find('[data-name="bedtime_time"]:first').attr('data-initval');

      console.log(item);
       
      applyEditableValues( $tr_children, item, $tr );
    }

    function setEditableValues( $tr_children, item, $tr ){
      $tr_children.find('[data-name="generic_name"]:first').text(item.pfn);
      $tr_children.find('[data-name="strength"]:first').text(item.strength);
      $tr_children.find('[data-name="brand_name"]:first').text("("+item.brand.replace(/^\(*/,'').replace(/\)*$/,'')+")");
      $tr_children.find('[data-name="purpose"]:first').text(item.purpose);
      $tr_children.find('[data-nested-2="instructions"]:first').text(item.instruction);
      $tr_children.find('[data-name="am_check"]:first').text(item.am_check);
      $tr_children.find('[data-name="am_time"]:first').text(item.am_time);
      $tr_children.find('[data-name="noon_check"]:first').text(item.noon_check);
      $tr_children.find('[data-name="noon_time"]:first').text(item.noon_time);
      $tr_children.find('[data-name="supper_check"]:first').text(item.supper_check);
      $tr_children.find('[data-name="supper_time"]:first').text(item.supper_time);
      $tr_children.find('[data-name="bedtime_check"]:first').text(item.bedtime_check);
      $tr_children.find('[data-name="bedtime_time"]:first').text(item.bedtime_time);

      //color code instruction
      colorCodeInstruction($tr_children.find('[data-nested-2="instructions"]:first'));
    }

    function updateEditableInitValues( $tr_children, item ){
      $tr_children.find('[data-name="generic_name"]:first').attr('data-initval',item.pfn);
      $tr_children.find('[data-name="strength"]:first').attr('data-initval',item.strength);
      $tr_children.find('[data-name="brand_name"]:first').attr('data-initval',item.brand);
      $tr_children.find('[data-name="purpose"]:first').attr('data-initval',item.purpose);
      $tr_children.find('[data-nested-2="instructions"]:first').attr('data-initval',item.instruction);
      $tr_children.find('[data-name="am_check"]:first').attr('data-initval',item.am_check);
      $tr_children.find('[data-name="am_time"]:first').attr('data-initval',item.am_time);
      $tr_children.find('[data-name="noon_check"]:first').attr('data-initval',item.noon_check);
      $tr_children.find('[data-name="noon_time"]:first').attr('data-initval',item.noon_time);
      $tr_children.find('[data-name="supper_check"]:first').attr('data-initval',item.supper_check);
      $tr_children.find('[data-name="supper_time"]:first').attr('data-initval',item.supper_time);
      $tr_children.find('[data-name="bedtime_check"]:first').attr('data-initval',item.bedtime_check);
      $tr_children.find('[data-name="bedtime_time"]:first').attr('data-initval',item.bedtime_time);
    }

    function applyEditableValues( $tr_children, item, $tr){
      setEditableValues($tr_children, item, $tr);
      updateEditableInitValues($tr_children, item);
      reapplyEditable($tr);
    }

    function reapplyEditable( $tr ){
      $tr.find('[data-editable]').each( function() {
        $(this).editable('destroy');
      });
      $tr.find('[data-editable]').editable();
    }

    function colorCodeInstruction( $instruction ) {
      var dosage_rxp_str = "([0-9]+(-[0-9]+)?)";
      var unit_rxp_str = "(mg|units|ml|mcg|puffs|g)";
      //var dosage_unit_rxp = new RegExp("([0-9]+-?[0-9]+[ ]*mg)");
      var dosage_unit_rxp = new RegExp("(" + dosage_rxp_str + "[ ]*" + unit_rxp_str + ")",'i');
      var content = $instruction.html();
      var dosage_unit = content.match(dosage_unit_rxp);
      console.log("array: " + dosage_unit);
      if( dosage_unit != null && dosage_unit.length > 0 ) {
        dosage_unit = dosage_unit[0];
        console.log(dosage_unit);
        dosage_unit = dosage_unit.replace(new RegExp(dosage_rxp_str,'i'), "<span style='color: red;'>$1</span>");
        dosage_unit = dosage_unit.replace(new RegExp(unit_rxp_str,'i'), "<span style='color: blue;'>$1</span>");
        console.log(dosage_unit);
        $instruction.html(content.replace(dosage_unit_rxp, dosage_unit));        
      }

      // frequency
      var freq_rxp_str = "((once|twice|(two|three|four|five|six) times)[ ]*(daily|a day|weekly|a week)|(every)?[ ]*[0-9]+(-[0-9]+)?[ ]*hours)";
      var content = $instruction.html();
      $instruction.html(content.replace(new RegExp(freq_rxp_str,'i'), "<span style='color: green;'>$1</span>"));
    }

    function showFrequencyMismatchError() {
      if( $('#top_fixed_notice .alert').is(':hidden') ){
        $('#top_fixed_notice .alert')
          .html('<b>Heads up!</b> Daily frequency and checked out times (AM, NOON, SUPPER, BEDTIME) do not match for this drug.')
          .addClass('alert-info top-notice-div')
          .css('display','none')
          .animate({
            width: "toggle",
            height: "toggle",
            opacity: "toggle"
          }, {
            duration: "slow"
          })
          .delay(6000)
          .fadeOut(300);
      }
    }
    
    function matchFrequencyWithTimeChecks( $tr ) {
    
      var no_of_time_checks = 0;
      $tr.find('[data-name$="_check"]').each( function () {
        if( $.trim($(this).text().toLowerCase()) == 'x' ){ no_of_time_checks += 1; }
      });
    
      var daily_freq_rxp = new RegExp("(once|twice|(two|three|four|five|six) times)[ ]*(daily|a day)", 'i');
      var instruction = $tr.find('[data-nested-2="instructions"]:first').text();
      var daily_freq = instruction.match(daily_freq_rxp);
      if( daily_freq != null && daily_freq.length >0 ){
        daily_freq = daily_freq[0].toLowerCase();
        switch (daily_freq){
          case "once daily":
          case "once a day":
            if( no_of_time_checks != 1 ){
              console.log("time check mismatch with (" + daily_freq + ") frequency");
              showFrequencyMismatchError();
            }else{
              $('#top_fixed_notice .alert').hide();
            }
            break;
          case "twice daily":
          case "twice a day":
          case "two times daily":
          case "two times a day":
            if( no_of_time_checks != 2 ){
              console.log("time check mismatch with (" + daily_freq + ") frequency");
              showFrequencyMismatchError();
            }else{
              $('#top_fixed_notice .alert').hide();
            }
            break;
          case "three times daily":
          case "three times a day":
            if( no_of_time_checks != 3 ){
              console.log("time check mismatch with (" + daily_freq + ") frequency");
              showFrequencyMismatchError();
            }else{
              $('#top_fixed_notice .alert').hide();
            }
            break;
          case "four times daily":
          case "four times a day":
            if( no_of_time_checks != 4 ){
              console.log("time check mismatch with (" + daily_freq + ") frequency");
              showFrequencyMismatchError();
            }else{
              $('#top_fixed_notice .alert').hide();
            }
            break;
          default:
            console.log("unknown daily frequency!");
            $('#top_fixed_notice .alert').hide();
            break;
        }
      }else{
        console.log("not a daily frequency!");
        $('#top_fixed_notice .alert').hide();
      }
    }

    applyAutoCompleteSearch = function() {
                               var current_input_this;
                               var data_name = $(this).attr('data-name');

                               // Change initval on editable field changed
                               $(this).on('save', function(e, params) {
                                       var editable = $(this).data('editable');
                                       var $element = editable.$element;
                                       $element.attr('data-initval', params.newValue);
                                       console.log('IN Editable Save: \n' + $element.attr('data-initval'));

                                       // put paranthesis around brand name
                                       if( data_name == 'brand_name' ){
                                         params.newValue = '(' + params.newValue + ')';
                                       }

                                       // specifically needed for the elements which has autocomplete on them
                                       // but doesn't hurt to reapply editable on every element
                                       var $tr = $element.closest('tr');
                                       var $tr_children = $tr.children();
                                       //reapplyEditable($tr);
                                       resetEditableValues($tr_children, $tr);
                                       matchFrequencyWithTimeChecks($element.closest('tr'));
                                     });
                               $(this).on('hidden', function(e, reason) {
                                 if( arguments.length == 2 ){
                                   console.log('In Editable Hidden: reason: ' + reason); 
                                   var editable = $(this).data('editable');
                                   var $element = editable.$element;
                                   // color code instruction
                                   if( $element.attr('data-nested-2') == 'instructions' ){
                                     colorCodeInstruction($element);
                                   }

                                   matchFrequencyWithTimeChecks($element.closest('tr'));
                                 }
                               });
                               // Apply autocomplete search to generic_name, strength and brand
                               if( data_name == 'generic_name' ||
                                   data_name == 'strength' ||
                                   data_name == 'brand_name' ) {
                                     $(this).on('shown', function(e, editable) {
                                       var editable = $(this).data('editable');
                                       //console.log(editable);
                                       //console.log(editable.value);
                                       if( data_name == 'brand_name' ){
                                         // trim brackets for brand name
                                         brand_name_val = editable.value.replace(/^\(*/,'').replace(/\)*$/,'');
                                         //console.log(brand_name_val);
                                         editable.input.$input.val(brand_name_val);
                                       }
                                       editable.input.$input.autocomplete({
                                         //$(this).next().children().find('input:first').autocomplete({
                                         appentTo: $(this),
                                         delay: 0,
                                         minLength: 0,
                                         //source: drugs_data,
                                         focus: function( event, ui ) {
                                           //console.log("in focus");
                                           if( data_name == 'strength' || data_name == 'brand_name' ){
                                             $( this ).closest('tr').find('[data-name="generic_name"]:first').text(ui.item.label);
                                           }else{
                                             // only update the item if it's generic_name
                                             $( this ).val( ui.item.label );
                                           }
                                           var $tr = $( this ).closest('tr');
                                           var $tr_children = $( this ).closest('tr').children();
                                           //console.log("half way through");
                                           //console.log($tr_children.find('[data-name="strength"]:first'));
                                           setEditableValues($tr_children, ui.item, $tr);
                                           return false;
                                         },
                                         select: function( event, ui ) {
                                           //console.log("in select ....");
                                           if( data_name == 'strength' || data_name == 'brand_name' ){
                                             $( this ).closest('tr').find('[data-name="generic_name"]:first').text(ui.item.label);
                                           }else{
                                             // only update the item if it's generic_name
                                             $( this ).val( ui.item.label );
                                           }
                                           var $tr = $( this ).closest('tr');
                                           var $tr_children = $( this ).closest('tr').children();
                                           applyEditableValues($tr_children, ui.item, $tr);
                                           // Submit the form to remove editable after selection
                                           editable.input.$input.closest('form').submit(function(e){ e.preventDefault(); });
                                           return false;
                                         },
                                         create: function( event, ui ) {
                                           current_input_this = this;
                                         },
                                         source: function( request, response ) {
                                           console.log($(current_input_this));
                                           var term = request.term;
                                           if( data_name == 'strength' || data_name == 'brand_name' ){
                                             var drug = $(current_input_this).closest('tr').find('[data-name="generic_name"]:first').attr('data-initval');
                                             console.log(drug);
                                             term = drug;
                                           }

                                           var startsWithMatcher = new RegExp("^" + term, "i")
                                               , startsWith = $.grep(drugs_data, function(value) {
                                                   return startsWithMatcher.test(value.label || value.value || value);
                                                 })
                                               , containsMatcher = new RegExp(term, "i")
                                               , contains = $.grep(drugs_data, function (value) {
                                                   return $.inArray(value, startsWith) < 0 &&
                                                   containsMatcher.test(value.label || value.value || value);
                                                 });

                                           response(startsWith.concat(contains));

                                           //console.log(term);                                          
                                           //var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");

                                           //response($.map(drugs_data, function(el) {
                                           //  console.log(term + "  |  " + el.pfn);
                                           //  if (matcher.test(el.pfn)) {
                                           //    return el;
                                           //  }
                                           //}));
                                         }
                                       })
                                       .data( "ui-autocomplete" )._renderItem = function( ul, item ) {
                                         return $( "<li>" )
                                         .append( "<a>" + item.pfn + " | OTTR: " + item.ottrn +
                                                  "<br><small>" + item.strength + " | " + item.brand + " | " + item.purpose  + "</small>" +
                                                  "<br><small>" + item.instruction + "</small></a>" )
                                         .appendTo( ul );
                                       };

                                       editable.input.$input.on('keydown.editable', function (e) {
                                         if (e.which === 27) {
                                           console.log('in escape ... restore defaults here ...');
                                           var $tr = $( this ).closest('tr');
                                           var $tr_children = $( this ).closest('tr').children();
                                           resetEditableValues($tr_children, $tr);
                                         }
                                       });

                                     });
                                }
                             };

    function applyEmptySpaceToDrugs() {
      $('#drugs_table').find('[data-empty-space="true"]').each( function() {
        $(this).height( $(this).height() + 50 );
        $($(this).find('img.row-spacer:first')).attr('src','/assets/remove-space.png').attr('title', 'Remove extra space');
      });
    }

    function toggleEmptySpaceForDrugs(el) {
      if( $(el).attr('data-btn-empty-space-state') == 'removed' ) {
        $(el).attr('data-btn-empty-space-state', 'added');
        $(el).text('Remove Extra Space From All Drugs').removeClass('btn-success').addClass('btn-danger');
        $('#drugs_table').find('[data-empty-space="false"]').each( function() {
          $(this).height( $(this).height() + 50 );
          $(this).attr('data-empty-space', 'true');
          $($(this).find('img.row-spacer:first')).attr('src','/assets/remove-space.png').attr('title', 'Remove extra space');
        });
      }else {
        $(el).attr('data-btn-empty-space-state', 'removed');
        $(el).text('Add Extra Space To All Drugs').removeClass('btn-danger').addClass('btn-success');
        $('#drugs_table').find('[data-empty-space="true"]').each( function() {
          $(this).height( 'auto' );
          $(this).attr('data-empty-space', 'false');
          $($(this).find('img.row-spacer:first')).attr('src','/assets/add-space.png').attr('title', 'Add extra space');
        });      
      }
    }

    $(document).ready(function(){
       //$(window).on('load',function(){
       console.log('hello');
       $('#drugs_table').dynoTable();
        
       $.fn.editable.defaults.mode = 'inline';
       $.fn.editable.defaults.defaultValue = '';
       $.fn.editable.defaults.emptytext = '...';
       $.fn.editable.defaults.onblur = 'submit';

       $('[data-editable]').each(function() {
         applyAutoCompleteSearch.apply(this, arguments);
         if( $(this).attr('data-nested-2') == 'instructions' ){
           colorCodeInstruction($(this));
         }
       });

       $('[data-editable]').editable();
       $('[data-editable-info]').editable();
    
       if($.cookie('TEXT_SIZE')) {
         $('body').addClass($.cookie('TEXT_SIZE')); 
       }
       $('.resizer a').click(function() {
         var textSize = $(this).parent().attr('class');
         $('body').removeClass('small medium large').addClass(textSize);
         $.cookie('TEXT_SIZE',textSize, { path: '/', expires: 10000 });
         return false;
       });

       applyEmptySpaceToDrugs();
       console.log('done');
    });

= content_for :page_css do
  -# %link{href: "http://cdnjs.cloudflare.com/ajax/libs/x-editable/1.4.6/bootstrap-editable/css/bootstrap-editable.css", rel: "stylesheet"}
  = stylesheet_link_tag 'bootstrap-editable.css'

#top_fixed_notice
  .alert.hide
= nested_form_for(@prescription, html: { onsubmit: "return false;" }) do |f|
  .row.x-resizeable
    .span5
      %p.bold Toronto General Hospital
      %p.bold Department of Pharmacy
      %p.bold Medication List
    .span7
      %p#patient_id{data: {patient_id: "#{@patient.id}"}}
        %strong Patient Name:
        %span{data: {editable_info: true, type: 'text', inputclass: 'input-medium',
                     resource: 'patient', name: 'last_name', url: "/patients/#{@patient.id}"}}= @patient.last_name
        %span= ", "
        %span{data: {editable_info: true, type: 'text', inputclass: 'input-medium',
                     resource: 'patient', name: 'first_name', url: "/patients/#{@patient.id}"}}= @patient.first_name        
      %p
        %strong Date:
        %span{data: {editable_info: false, type: 'date', inputclass: 'input-medium'}}= Date.today
      %p#pharmacist_id{data: {pharmacist_id: "#{current_pharmacist.id}"}}
        %strong Pharmacist Name:
        %span{data: {editable_info: true, type: 'text', inputclass: 'input-medium',
                     resource: 'pharmacist', name: 'last_name', url: "/pharmacists/#{current_pharmacist.id}"}}= current_pharmacist.last_name
        %span= ", "
        %span{data: {editable_info: true, type: 'text', inputclass: 'input-medium',
                     resource: 'pharmacist', name: 'first_name', url: "/pharmacists/#{@patient.id}"}}= current_pharmacist.first_name        
      %p
        %strong Physician Name:
        %span{data: {editable_info: true, type: 'text', inputclass: 'input-medium',
                     resource: 'prescription', name: 'physician', url: "/prescriptions/#{@prescription.id}"}}= @prescription.physician
  .row.x-resizeable
    .span12
      %p
        %strong Medication Allergies:
        %span{data: {editable_info: true, type: 'text', inputclass: 'input-large',
                     resource: 'prescription', name: 'alergies', url: "/prescriptions/#{@prescription.id}"}}= @prescription.alergies
    .span12
      = link_to 'Add Extra Space To All Drugs', 'javascript:void(0)', class: 'btn btn-success btn-small', data: { btn_empty_space_state: 'removed' }, onclick: 'toggleEmptySpaceForDrugs(this);'
      %ul.resizer.pull-right
        %li.small
          %a{href: "#"} A
        %li.medium
          %a{href: "#"} A
        %li.large
          %a{href: "#"} A
    .span12
      %table#drugs_table.table.table-bordered.table-hover.table-condensed{data: {prescription_id: "#{@prescription.id}"}}
        %thead
          %tr
            %th.control
            %th DRUG
            %th INSTRUCTIONS
            %th PURPOSE
            %th AM
            %th NOON
            %th SUPPER
            %th BED-TIME
            %th.control
            %th.control
            %th.control
        %tbody.drugs
          - @prescription.drugs.order('order_no ASC').each_with_index do |drug, index|
            = render partial: 'drug_row', locals: { drug: drug, index: index}

    .span12
      %p{data: {editable_info: true, type: 'text', inputclass: 'input-large',
                     resource: 'prescription', name: 'note', url: "/prescriptions/#{@prescription.id}"}}= @prescription.note

  .row{style: 'margin-top:50px;'}
    .span4.pull-left
      = link_to 'Cancel', patients_path, class: 'btn btn-large'
    .span8
      .btn-group.pull-right
        = button_tag 'Save', name: 'save', class: 'btn btn-large btn-success', onclick: 'btnSaveClicked();'
        = button_tag 'Finalize', name: 'finalize', class: 'btn btn-large btn-primary', onclick: 'btnFinalizeClicked();'
        = button_tag 'Print Preview', name: 'print', class: 'btn btn-large btn-info', onclick: 'btnPrintPreviewClicked();'
      #loading_image.hide.pull-right{style: 'padding: 8px 20px;'}= image_tag 'loading64.gif'
      #alert_msg.pull-right.alert.hide{style: 'margin:4px 10px;'}
